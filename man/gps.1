'\" t
.\"     Title: gps
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 2.0.12
.\"      Date: 2021-09-20
.\"    Manual: GPSD Documentation
.\"    Source: GPSD Version 3.24
.\"  Language: English
.\"
.TH "GPS" "1" "2021-09-20" "GPSD Version 3.24" "GPSD Documentation"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
gps \- Overview of gpsd clients and helpers
.SH "SYNOPSIS"
.sp
Clients:
.sp
\fBcgps\fP [OPTIONS] [server[:port[:device]]]
.sp
\fBgegps\fP [OPTIONS] [server[:port[:device]]]
.sp
\fBgps2udp\fP [OPTIONS] [server[:port[:device]]]
.sp
\fBgpscsv\fP [OPTIONS] [server[:port[:device]]]
.sp
\fBgpsmon\fP [OPTIONS] [server[:port[:device]]]
.sp
\fBgpspipe\fP [OPTIONS] [server[:port[:device]]]
.sp
\fBgpsplot\fP [OPTIONS] [server[:port[:device]]]
.sp
\fBgpsprof\fP [OPTIONS] [server[:port[:device]]]
.sp
\fBgpsrinex\fP [OPTIONS] [server[:port[:device]]]
.sp
\fBgpssubframe\fP [OPTIONS] [server[:port[:device]]]
.sp
\fBgpxlogger\fP [OPTIONS] [server[:port[:device]]]
.sp
\fBlcdgps\fP [OPTIONS] [server[:port[:device]]]
.sp
\fBubxtool\fP [OPTIONS] [server[:port[:device]]]
.sp
\fBxgps\fP [OPTIONS] [server[:port[:device]]]
.sp
\fBxgpsspeed\fP [OPTIONS] [server[:port[:device]]]
.sp
\fBzerk\fP [OPTIONS] [server[:port[:device]]]
.sp
Helpers:
.sp
\fBgpscat\fP [OPTIONS] file\-or\-serial\-port
.sp
\fBgpsctl\fP [OPTIONS]
.sp
\fBgpsdctl\fP action device
.sp
\fBgpsdecode\fP [OPTIONS]
.sp
\fBgpsdebuginfo\fP
.sp
\fBgpsfake\fP [OPTIONS]
.sp
\fBgpsinit\fP [OPTIONS]
.sp
\fBntpshmmon\fP [OPTIONS]
.sp
\fBppscheck\fP [OPTIONS] device
.SH "DESCRIPTION"
.sp
\fBgpsd\fP is a daemon for managing GPS receivers, GNSS receivers, AIS
receivers, and more.  Over time it has agglomerated a number of
diverse clients that communicate with \fBgpsd\fP for various tasks.
.SS "CLIENTS"
.sp
Each of the \fBgpsd\fP clients connects to a \fBgpsd\fP daemon to use the
data in various ways.  See the sections ARGUMENTS and OPTIONS for
more information on the clients.
.sp
\fBcgps\fP
.RS 4
curses terminal client for gpsd
.RE
.sp
\fBgegps\fP
.RS 4
Google Earth client for gpsd
.RE
.sp
\fBgps\fP
.RS 4
Overview of gpsd clients and helpers
.RE
.sp
\fBgpscsv\fP
.RS 4
dump the JSON output from gpsd as CSV
.RE
.sp
\fBgpsdecode\fP
.RS 4
decode GPS, RTCM or AIS streams into a readable format
.RE
.sp
\fBgpsmon\fP
.RS 4
real\-time GPS packet monitor and control utility
.RE
.sp
\fBgpspipe\fP
.RS 4
tool to connect to gpsd and retrieve sentences
.RE
.sp
\fBgpsplot\fP
.RS 4
tool to dynamically dump plot data from gpsd
.RE
.sp
\fBgpsprof\fP
.RS 4
profile a GPS and gpsd, plotting latency information
.RE
.sp
\fBgpsrinex\fP
.RS 4
Read data from gpsd convert to RINEX3 and save to a file.
.RE
.sp
\fBgpssubframe\fP
.RS 4
tool to dump subframe sentences from gpsd
.RE
.sp
\fBgpxlogger\fP
.RS 4
Tool to connect to gpsd and generate a GPX file
.RE
.sp
\fBlcdgps\fP
.RS 4
LCD client for gpsd
.RE
.sp
\fBxgps\fP
.RS 4
X client for gpsd
.RE
.sp
\fBxgpsspeed\fP
.RS 4
X speedometer for gpsd
.RE
.SS "HELPERS"
.sp
The \fBgpsd\fP helpers can be used for administration of \fBgpsd\fP systems.
.sp
\fBgps2udp\fP
.RS 4
feed the take from gpsd to one or more aggregation sites
.RE
.sp
\fBgpscat\fP
.RS 4
dump the output from a GPS
.RE
.sp
\fBgpsctl\fP
.RS 4
control the modes of a GNSS receiver
.RE
.sp
\fBgpsdctl\fP
.RS 4
tool for sending commands to gpsd over its control socket
.RE
.sp
\fBgpsdebuginfo\fP
.RS 4
Generate a gpsd debug dump of your host.
.RE
.sp
\fBgpsfake\fP
.RS 4
test harness for gpsd, simulating a GNSS receiver
.RE
.sp
\fBgpsinit\fP
.RS 4
initialize CAN kernel modules for GPSD
.RE
.sp
\fBntploggps\fP
.RS 4
log gpsd data
.RE
.sp
\fBntpshmmon\fP
.RS 4
capture samples from gpsd or other ntpd refclock sources
.RE
.SS "LIBRARIES"
.sp
Programmers can find additional information on the \fBgpsd\fP here:
.sp
\fBgpsd_json\fP
.RS 4
gpsd request/response protocol
.RE
.sp
\fBlibgps\fP
.RS 4
C service library for communicating with the GPS daemon
.RE
.sp
\fBlibgpsmm\fP
.RS 4
C++ and QT class wrappers for the GPS daemon
.RE
.sp
\fBlibQgpsmm\fP
.RS 4
C++ and QT class wrappers for the GPS daemon
.RE
.SH "OPTIONS"
.sp
The \fBgpsd\fP clients share a few common options:
.sp
\fB\-?\fP, \fB\-h\fP, \fB\-\-help\fP
.RS 4
Print a summary of options and then exit.
.RE
.sp
\fB\-V\fP, \fB\-\-version\fP
.RS 4
Print the package version and exit.
.RE
.SH "ARGUMENTS"
.sp
By default, clients collect data from the local \fBgpsd\fP daemon running
on localhost, using the default GPSD port 2947. The optional argument
to any client may override this behavior:
.sp
\fB[server[:port[:device]]]\fP
.sp
\fBserver\fP
.RS 4
The optional host name, IPv4 address, or IPv6 address of
the \fBgpsd\fP daemon to connect to. If the server specification contains
square brackets, the part inside them is taken as an IPv6 address and
port/device suffixes are only parsed after the trailing bracket. The
default is localhost.
.RE
.sp
\fBport\fP
.RS 4
The optional TCP port of the daemon to connect to. The default
is 2947.
.RE
.sp
\fBdevice\fP
.RS 4
The optional device name to be watched.
.RE
.sp
Some possible cases look like this:
.sp
example.com
.RS 4
Connect to the default port 2497 on example.com, trying both IPv4 and IPv6.
.RE
.sp
example.com:2317
.RS 4
Look at port 2317 on example.com, trying both IPv4 and IPv6.
.RE
.sp
localhost::/dev/ttyS1
.RS 4
Look at the default port, 2947, of localhost, trying both IPv4 and IPv6 and
watching output from serial device 1.
.RE
.sp
71.162.241.5:2317:/dev/ttyS3
.RS 4
Look at port 2317 at the specified IPv4 address, collecting data from
attached serial device 3.
.RE
.sp
[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:2317:/dev/ttyS5
.RS 4
Look at port 2317 at the specified IPv6 address, collecting data from
attached serial device 5.
.RE
.SH "ENVIRONMENT"
.sp
Most of the \fBgpsd\fP clients check for the environment variables
\fBGPSD_UNITS\fP, \fBLC_MEASUREMENT\fP, and \fBLANG\fP.  Maybe more.
.sp
\fBGPSD_UNITS\fP is checked if no unit system is specified on the command
line. It may be set to \(aqi\(aq. \(aqimperial\(aq, \(aqm\(aq, \(aqmetric\(aq, or \(aqn\(aq,
\(aqnautical\(aq.
.sp
\fBLC_MEASUREMENT\fP and then \fBLANG\fP are checked if no unit system has been
specified on the command line, or in \fBGPSD_UNITS\fP. If the value is \(aqC\(aq,
\(aqPOSIX\(aq, or begins with \(aqen_US\(aq the unit system is set to imperial. The
default if no system has been selected is metric.
.SH "RETURN VALUES"
.sp
The \fBgpsd\fP clients return simple success or failure codes:
.sp
\fB0\fP
.RS 4
on success.
.RE
.sp
\fB1\fP
.RS 4
on failure
.RE
.SH "SEE ALSO"
.sp
\fBgegps\fP(1), \fBgpsctl\fP(1), \fBgpsdebuginfo\fP(1), gpsprof*(1), \fBgpsfake\fP(1),
\fBgpscat\fP(1), \fBgpspipe\fP(1), \fBgpsmon\fP(1), xgps*(1). \fBxgpsspeed\fP(1)
.sp
\fBlibgps\fP(3), \fBlibgpsmm\fP(3)
.sp
\fBgpsd\fP(8)
.SH "RESOURCES"
.sp
\fBProject web site:\fP \c
.URL "https://gpsd.io/" "" ""
.SH "COPYING"
.sp
This file is Copyright 2013 by the GPSD project
.br
SPDX\-License\-Identifier: BSD\-2\-clause